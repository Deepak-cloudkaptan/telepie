package no.hild1.bank.telepay;

import no.hild1.bank.TelepayParserException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdesktop.swingx.JXCollapsiblePane;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Betfor00 extends Betfor {

    public Betfor00(BetforHeader header, String stringRecord) throws TelepayParserException {
        super(header, stringRecord);
        log.debug(this.stringRecord);
        m = this.betforPattern.matcher(this.stringRecord);

        log.debug(this.betforRegexp);
        if (m.matches() && header.getBetforType() == 0) {
            log.debug("Found Betfor00");
        } else {
            throw new TelepayParserException(header.getRecordNum(), "Regexp did not match Betfor00");
        }
    }
    JButton showHideButton;
    JXCollapsiblePane mainCPanel;
    public JPanel getPanel() {
        JPanel panel = new JPanel();
        JTable table = new JTable();
        table.setEnabled(false);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Key");
        model.addColumn("Value");
        String[] keyValue = new String[2];
        for(Element e: Element.values()) {
            keyValue[0] = e.name();
            keyValue[1] = get(e);
            model.addRow(keyValue);
        }
        table.setModel(model);
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        showHideButton = new JButton("Record #" + header.getRecordNum() + ", BETFOR" + header.getBetforTypeString());
        showHideButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                mainCPanel.setCollapsed(!mainCPanel.isCollapsed());
            }
        });
        panel.add(showHideButton);
        mainCPanel = new JXCollapsiblePane();
        mainCPanel.setCollapsed(true);
        mainCPanel.add(table);
        mainCPanel.setCollapsed(false);
        panel.add(mainCPanel);
        return panel;
    }

    public String get(Element e) {
        return m.group(((Element)e).name());
    }

    /* makeBetforData.sh START */
	/* Generated by makeBetforData.sh */
	private static Log log = LogFactory.getLog(Betfor00.class);
	private static String betforRegexp = "^(?<"+ Element.APPLICATIONHEADER.name() + ">.{40})"
		+ "(?<"+ Element.TRANSACTIONCODE.name() + ">.{8})"
		+ "(?<"+ Element.ENTERPRISENUMBER.name() + ">.{11})"
		+ "(?<"+ Element.DIVISION.name() + ">.{11})"
		+ "(?<"+ Element.SEQUENCECONTROL.name() + ">.{4})"
		+ "(?<"+ Element.RESERVED1.name() + ">.{6})"
		+ "(?<"+ Element.PRODUCTIONDATE.name() + ">.{4})"
		+ "(?<"+ Element.PASSWORD.name() + ">.{10})"
		+ "(?<"+ Element.VERSION.name() + ">.{10})"
		+ "(?<"+ Element.NEWPASSWORD.name() + ">.{10})"
		+ "(?<"+ Element.OPERATORNO.name() + ">.{11})"
		+ "(?<"+ Element.SIGILLSEALUSE.name() + ">.{1})"
		+ "(?<"+ Element.SIGILLSEALDATE.name() + ">.{6})"
		+ "(?<"+ Element.SIGILLPARTKEY.name() + ">.{20})"
		+ "(?<"+ Element.SIGILLSEALHOW.name() + ">.{1})"
		+ "(?<"+ Element.RESERVED2.name() + ">.{143})"
		+ "(?<"+ Element.OWNREFERENCEBATCH.name() + ">.{15})"
		+ "(?<"+ Element.RESERVED3.name() + ">.{9})"
		+ "$";
	public static Pattern betforPattern = Pattern.compile(betforRegexp);
	Matcher m;
	public enum Element {
		APPLICATIONHEADER, TRANSACTIONCODE, ENTERPRISENUMBER, 
		DIVISION, SEQUENCECONTROL, RESERVED1, 
		PRODUCTIONDATE, PASSWORD, VERSION, 
		NEWPASSWORD, OPERATORNO, SIGILLSEALUSE, 
		SIGILLSEALDATE, SIGILLPARTKEY, SIGILLSEALHOW, 
		RESERVED2, OWNREFERENCEBATCH, RESERVED3
	}
    /* makeBetforData.sh STOP */
}
